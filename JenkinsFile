pipeline {
    agent any
    tools{
        jdk 'jdk17'
        nodejs 'node16'
    }
    
    environment {
        SCANNER_HOME=tool 'sonar-scanner'
        GIT_REPO_NAME = "Tetris-manifest"
        GIT_USER_NAME = "evancullen"
      }

    stages {
        stage('CODECHECKOUT') {
            steps {
                git branch: 'main', url: 'https://github.com/evancullen/Tetris-V1.git'
            }
        }
    
        stage('Sonar Analysis') {
            steps {
                  withSonarQubeEnv('sonar-server') {
                    sh ''' $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=TetrisVersion1.0 \
                    -Dsonar.projectKey=TetrisVersion1.0 '''
                }
            }
        }
        
        stage('Quality Gate') {
            steps {
                 script{
                     waitForQualityGate abortPipeline: false, credentialsId: 'sonarqube-cred'
                 }
            }
        }
        
        stage('NPM') {
            steps {
                sh 'npm install'
                  
            }
        }
        
        stage('Trivy FS') {
            steps {
                sh 'trivy fs . > trivyfs.txt'
                  
            }
        }
        
        stage('OWASP FS SCAN') {
            steps {
                dependencyCheck additionalArguments: '--scan ./ --disableYarnAudit --disableNodeAudit', odcInstallation: 'DP-Check'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }
        
        stage('Docker Build and Push') {
            steps {
               script{
                  withDockerRegistry(credentialsId: 'docker_cred', toolName: 'docker') {
                  sh ''' 
                  docker build -t tetrisv1 .
                  docker tag tetrisv1 evancullen1/tetrisv1:latest
                  docker push evancullen1/tetrisv1:latest
                 '''
                }
            }  
        }
         
       }
       
       stage('Trivy IMAGE') {
            steps {
                sh 'trivy image evancullen1/tetrisv1:latest > trivyimage.txt'
                  
            }
        } 
        stage('CHECKOUT Manifest') {
            steps {
                git branch: 'main', url: 'https://github.com/evancullen/Tetris-manifest.git'
            }
        }
        stage('Update Deployment File') {
            steps {
                script {
                withCredentials([string(credentialsId: 'github-cred', variable: 'GITHUB_TOKEN')]) {
                // Determine the image name dynamically based on your versioning strategy
                NEW_IMAGE_NAME = "evancullen1/tetrisv1:latest"

                // Replace the image name in the deployment.yaml file
                sh "sed -i 's|image: .*|image: $NEW_IMAGE_NAME|' deployment.yml"

                // Git commands to stage, commit, and push the changes
                sh 'git add deployment.yml'
                sh "git commit -m 'Update deployment image to $NEW_IMAGE_NAME'"
                sh "git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main"
               }
           }
        }
    }
    }
}
